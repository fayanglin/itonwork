diff --git a/kernel/cht/drivers/gpu/drm/i915/intel_hdmi.c b/kernel/cht/drivers/gpu/drm/i915/intel_hdmi.c
old mode 100644
new mode 100755
index c69d5dc..37c5ce0
--- a/kernel/cht/drivers/gpu/drm/i915/intel_hdmi.c
+++ b/kernel/cht/drivers/gpu/drm/i915/intel_hdmi.c
@@ -1372,10 +1372,13 @@ static int intel_hdmi_get_modes(struct drm_connector *connector)
 			hdmi_get_eld(connector->eld);
 #ifdef CONFIG_EXTCON
 			if (strlen(intel_connector->hotplug_switch.name) != 0) {
-				printk("before extcon_set_state-set-hotplug_switch=1 \n");
+				printk("--lfy--before extcon_set_state-set-hotplug_switch=0 \n");
 				old_enable=0;
-				hdmi_enable_flag=1;
-				extcon_set_state(
+
+				hdmi_enable_flag=0;
+				//extcon_set_state(
+				//&intel_connector->hotplug_switch, 1);
+								extcon_set_state(
 				&intel_connector->hotplug_switch, 0);
 			}
 #endif
diff --git a/kernel/cht/drivers/misc/Kconfig b/kernel/cht/drivers/misc/Kconfig
index 4706a45..fc05c45 100755
--- a/kernel/cht/drivers/misc/Kconfig
+++ b/kernel/cht/drivers/misc/Kconfig
@@ -575,4 +575,5 @@ source "drivers/misc/dgnss/Kconfig"
 source "drivers/misc/bt_lpm/Kconfig"
 source "drivers/misc/bcm-lpm/Kconfig"
 source "drivers/misc/btevent/Kconfig"
+source "drivers/misc/tas5711/Kconfig"
 endmenu
diff --git a/kernel/cht/drivers/misc/Makefile b/kernel/cht/drivers/misc/Makefile
index c668d07..6426fde 100755
--- a/kernel/cht/drivers/misc/Makefile
+++ b/kernel/cht/drivers/misc/Makefile
@@ -68,3 +68,4 @@ obj-$(CONFIG_BT_LPM)            += bt_lpm/
 obj-$(CONFIG_BCM_BT_LPM)        += bcm-lpm/
 obj-$(CONFIG_JN5169_DRIVER) 	+= jn5169_driver.o
 obj-y        += btevent/
+obj-y        += tas5711/ 
diff --git a/kernel/cht/drivers/misc/tas5711/Kconfig b/kernel/cht/drivers/misc/tas5711/Kconfig
new file mode 100644
index 0000000..1892d0d
--- /dev/null
+++ b/kernel/cht/drivers/misc/tas5711/Kconfig
@@ -0,0 +1,5 @@
+config TAS5711
+	tristate "linfayang tas5711 driver"
+	default y
+	help
+	  Say M here if linfayang tas5711 driver.
diff --git a/kernel/cht/drivers/misc/tas5711/Makefile b/kernel/cht/drivers/misc/tas5711/Makefile
new file mode 100644
index 0000000..6c74d34
--- /dev/null
+++ b/kernel/cht/drivers/misc/tas5711/Makefile
@@ -0,0 +1 @@
+obj-$(CONFIG_TAS5711) += tas5711.o
diff --git a/kernel/cht/drivers/misc/tas5711/tas5711.c b/kernel/cht/drivers/misc/tas5711/tas5711.c
new file mode 100755
index 0000000..8047329
--- /dev/null
+++ b/kernel/cht/drivers/misc/tas5711/tas5711.c
@@ -0,0 +1,654 @@
+/*
+ * TAS571x amplifier audio driver
+ *
+ * Copyright (C) 2015 Google, Inc.
+ * Copyright (c) 2013 Daniel Mack <zonque@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+#include <linux/clk.h>
+#include <linux/delay.h>
+#include <linux/device.h>
+#include <linux/gpio/consumer.h>
+#include <linux/i2c.h>
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/of_device.h>
+#include <linux/regmap.h>
+#include <linux/regulator/consumer.h>
+#include <linux/stddef.h>
+#include <sound/pcm_params.h>
+#include <linux/miscdevice.h>
+#include <sound/soc.h>
+#include <sound/tlv.h>
+#include <linux/gpio.h>
+#include "tas5711.h"
+
+unsigned char Vol_Map[21] = {0xff,0x8e,0x7e,0x6e,0x66,0x5e,0x56,0x4e,0x46,0x3e,0x36,0x2e,0x26,0x1e,0x16,0x14,0x13,0x10,0x0e,0x0d,0x0c};
+
+unsigned char Input_MUX[4]={0x00,0x89,0x77,0x72}; 
+unsigned char PWM_MUX[4]={0x01,0x10,0x32,0x45}; 
+
+unsigned char DRC1AE[8] ={0x00,0x00,0x94,0x43,0x00,0x7F,0x6B,0xB9};
+unsigned char DRC1AA[8] ={0x00,0x00,0x4A,0x37,0x00,0x7F,0xB5,0xC5};
+unsigned char DRC1AD[8] ={0x00,0x00,0x4A,0x37,0x00,0x7F,0xB5,0xC5};
+
+unsigned char DRC2AE[8] ={0x00,0x00,0x94,0x42,0x00,0x7F,0x6B,0xB9};
+unsigned char DRC2AA[8] ={0x00,0x00,0x4A,0x36,0x00,0x7F,0xB5,0xC5};
+unsigned char DRC2AD[8] ={0x00,0x00,0x4A,0x36,0x00,0x7F,0xB5,0xC5};
+
+unsigned char DRC1_T[4] ={0xFD,0x2D,0x26,0x01};
+unsigned char DRC1_K[4] ={0x0F,0x84,0x44,0x44};
+unsigned char DRC1_O[4] ={0x00,0x08,0x42,0x10};
+
+unsigned char DRC2_T[4] ={0xFD,0x2D,0x26,0x01};
+unsigned char DRC2_K[4] ={0x0F,0x84,0x44,0x44};
+unsigned char DRC2_O[4] ={0x00,0x08,0x42,0x10};
+
+unsigned char DRC_Control[4]  ={0x00,0x00,0x00,0x00};
+unsigned char BSW_Control[4]  ={0x00,0x00,0x00,0x00};
+
+unsigned char Output_post_scale[4]  ={0x00,0x80,0x00,0x00};
+unsigned char Output_pre_scale[4]  ={0x00,0x02,0x00,0x00};
+
+unsigned char Subchannel_BQ0[20] ={0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
+unsigned char Subchannel_BQ1[20] ={0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
+
+unsigned char Psedup_ch2_BQ0[20]={0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
+unsigned char	Psedup_ch2_BQ1[20]={0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
+
+unsigned char CH1_OUTPUT_MIX[12]  ={0x00,0x80,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00};
+unsigned char CH2_OUTPUT_MIX[12]  ={0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
+unsigned char CH4_OUTPUT_MIX[8]  ={0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00};
+
+unsigned char CH1_INPUT_MIX[16]  ={0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00};
+unsigned char CH2_INPUT_MIX[16]  ={0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00};
+unsigned char CH3_INPUT_MIX[12]  ={0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
+//0x29-0x2f
+unsigned char CH1_BQ0[20] ={0x00,0x7F,0x7F,0xD2,0x0F,0x80,0x80,0x2E,0x00,0x00,0x00,0x00,0x00,0x7E,0xFF,0xA5,0x00,0x00,0x00,0x00}; //0
+unsigned char CH1_BQ1[20] ={0x00,0x80,0x37,0x08,0x0F,0x00,0xBC,0x76,0x00,0x7F,0x0C,0xC6,0x00,0xFF,0x43,0x8A,0x0F,0x80,0xBC,0x31};// 1
+unsigned char CH1_BQ2[20] ={0x00,0x80,0x16,0x27,0x0F,0x00,0xAC,0x06,0x00,0x7F,0x3E,0xB8,0x00,0xFF,0x53,0xFA,0x0F,0x80,0xAB,0x21}; // 2
+unsigned char CH1_BQ3[20] ={0x00,0x80,0x07,0x17,0x0F,0x00,0xF1,0x15,0x00,0x7F,0x09,0x95,0x00,0xFF,0x0E,0xEB,0x0F,0x80,0xEF,0x54}; // 3
+unsigned char CH1_BQ4[20] ={0x00,0x7F,0xEB,0x2F,0x0F,0x01,0x82,0x58,0x00,0x7E,0x96,0x0A,0x00,0xFE,0x7D,0xA8,0x0F,0x81,0x7E,0xC6}; // 4
+unsigned char CH1_BQ5[20] ={0x00,0x80,0x25,0x64,0x0F,0x05,0x1F,0xBB,0x00,0x7A,0xEC,0x6E,0x00,0xFA,0xE0,0x45,0x0F,0x84,0xEE,0x2E}; // 5
+unsigned char CH1_BQ6[20] ={0x00,0x80,0x3D,0x8C,0x0F,0x08,0xA5,0x4A,0x00,0x77,0xA5,0x08,0x00,0xF7,0x5A,0xB6,0x0F,0x88,0x1D,0x6C}; // 6
+	//0x58,0x59
+unsigned char CH1_BQ7[20] ={0x00,0x78,0xB9,0x9B,0x0F,0xC1,0xA8,0x9E,0x00,0x1A,0x73,0xC7,0x00,0x48,0x72,0xC6,0x0F,0xE2,0xB7,0x3A}; // 7
+unsigned char CH1_BQ8[20] ={0x00,0x9A,0x23,0x7D,0x00,0x0E,0x00,0x7C,0x0F,0x9B,0xF5,0xE6,0x0F,0xF1,0xFF,0x84,0x00,0x49,0xE6,0x9D}; // 8
+	//0x30-0x36
+unsigned char CH2_BQ0[20]={0x00,0x7F,0x7F,0xD2,0x0F,0x80,0x80,0x2E,0x00,0x00,0x00,0x00,0x00,0x7E,0xFF,0xA5,0x00,0x00,0x00,0x00}; // 0
+unsigned char CH2_BQ1[20]={0x00,0x80,0x37,0x08,0x0F,0x00,0xBC,0x76,0x00,0x7F,0x0C,0xC6,0x00,0xFF,0x43,0x8A,0x0F,0x80,0xBC,0x31}; // 1
+unsigned char CH2_BQ2[20]={0x00,0x80,0x16,0x27,0x0F,0x00,0xAC,0x06,0x00,0x7F,0x3E,0xB8,0x00,0xFF,0x53,0xFA,0x0F,0x80,0xAB,0x21}; // 2
+unsigned char CH2_BQ3[20]={0x00,0x80,0x07,0x17,0x0F,0x00,0xF1,0x15,0x00,0x7F,0x09,0x95,0x00,0xFF,0x0E,0xEB,0x0F,0x80,0xEF,0x54}; // 3
+unsigned char CH2_BQ4[20]={0x00,0x7F,0xEB,0x2F,0x0F,0x01,0x82,0x58,0x00,0x7E,0x96,0x0A,0x00,0xFE,0x7D,0xA8,0x0F,0x81,0x7E,0xC6}; // 4
+unsigned char CH2_BQ5[20]={0x00,0x80,0x25,0x64,0x0F,0x05,0x1F,0xBB,0x00,0x7A,0xEC,0x6E,0x00,0xFA,0xE0,0x45,0x0F,0x84,0xEE,0x2E}; // 5 
+unsigned char CH2_BQ6[20]={0x00,0x80,0x3D,0x8C,0x0F,0x08,0xA5,0x4A,0x00,0x77,0xA5,0x08,0x00,0xF7,0x5A,0xB6,0x0F,0x88,0x1D,0x6C}; // 6
+	//0x5c,0x5d
+unsigned char CH2_BQ7[20]={0x00,0x78,0xB9,0x9B,0x0F,0xC1,0xA8,0x9E,0x00,0x1A,0x73,0xC7,0x00,0x48,0x72,0xC6,0x0F,0xE2,0xB7,0x3A}; // 7
+unsigned char CH2_BQ8[20]={0x00,0x9A,0x23,0x7D,0x00,0x0E,0x00,0x7C,0x0F,0x9B,0xF5,0xE6,0x0F,0xF1,0xFF,0x84,0x00,0x49,0xE6,0x9D}; // 8
+
+//unsigned char OnebyteReg[13] 		={0x06,0x07,0x08,0x09,0x0a,0x0e,0x10,0x11,0x12,0x13,0x14,0x19,0x1c};
+//unsigned char OnebyteRegData[13] 		={0x00,0x2e,0x2e,0x2e,0x2e,0xd1,0x02,0xac,0x54,0xac,0x54,0x30,0x02};
+
+unsigned char OnebyteReg[13] 		={0x06,0x07,0x08,0x09,0x0a,0x0e,0x10,0x11,0x12,0x13,0x14,0x19,0x1c};
+unsigned char OnebyteRegData[13] 	={0x00,0x40,0x30,0x30,0x30,0x91,0x02,0xb8,0x60,0xa0,0x48,0x3a,0x02};
+
+#define  ONE_BYTE_REG_NUM   13
+
+struct tas571x_private {
+	/* GPIO driving Reset pin, if any */
+	int		pdn_gpio;
+	int		reset_gpio;
+	int 		mode;
+	struct i2c_client *client;
+
+};
+//struct tas571x_private private_data;
+struct tas5711_RegData
+{
+	unsigned int reg;
+	uint8_t  data;
+};
+struct i2c_client  * client_5711; 
+
+static unsigned int MasterVol = 11;
+
+int config_gpio_ctrl0reg(struct gpio_chip *chip,u32 value, unsigned offset);
+int config_gpio_ctrl1reg(struct gpio_chip *chip,u32 value, unsigned offset);
+static int tas5711_register_size(struct device *dev, unsigned int reg)
+{
+	if(reg < 0x1f)
+	{
+		printk("[lfy][tas5711]reg = %x, tas5711_register_size  = 1\n",reg);
+		return 1;
+	}
+	else if(reg >0x62)
+	{
+		printk("[lfy][tas5711]reg = %x, tas5711_register_size  = 4\n",reg);
+		return 4;
+	}
+	else
+	{
+	       switch(reg)
+       	{
+       		case 0x20: 
+			case 0x21:
+			case 0x25:
+				
+       		case 0x40: 
+			case 0x41:
+       		case 0x42: 
+			case 0x43:
+       		case 0x44: 
+			case 0x45:
+			case 0x46:
+			case 0x50:
+			case 0x56:
+			case 0x57:
+			case 0x5f:	
+				//printk("[lfy][tas5711]reg = %x, tas5711_register_size  = 4\n",reg);
+				return 4;
+			case 0x3a:
+			case 0x3b:
+			case 0x3c:
+			case 0x3d:
+			case 0x3e:
+			case 0x3f:
+			case 0x60:
+			case 0x61:
+				//printk("[lfy][tas5711]reg = %x, tas5711_register_size  = 8\n",reg);
+				return 8;
+			case 0x51:
+			case 0x52:
+			case 0x55:
+				//printk("[lfy][tas5711]reg = %x, tas5711_register_size  = 12\n",reg);
+				return 12;
+			case 0x53:
+			case 0x54:
+				//printk("[lfy][tas5711]reg = %x, tas5711_register_size  = 16\n",reg);
+				return 16;
+			default:
+				//printk("[lfy][tas5711]reg = %x, tas5711_register_size  = 20\n",reg);
+				return 20;
+       	}
+	}
+
+	dev_err(dev, "Unsupported register address: %d\n", reg);
+	return 0;
+
+}
+static int tas5711_regOnebyte_write(struct i2c_client *client, unsigned int reg,
+			      unsigned char  value)
+{
+	struct i2c_client *tempclient = client;
+	struct tas571x_private *priv = i2c_get_clientdata(client);
+	unsigned int i, size;
+	uint8_t buf[5];
+	int ret;
+     
+	size = tas5711_register_size(&client->dev, reg);
+	buf[0] = reg;
+	buf[1] = value;
+	
+	ret = i2c_master_send(client, buf, 2);
+	if (ret == size + 1)
+		return 0;
+	else if (ret < 0)
+	{
+		printk("[lfy][tas5711]ERROR WRITE! ret= %d\n",ret);
+		return ret;
+	}
+	else
+		return -EIO;
+}
+static int tas5711_reg_write(struct i2c_client *tempclient, unsigned int reg,
+			      unsigned char  *data)
+{
+	struct i2c_client *client = tempclient;
+	struct tas571x_private *priv = i2c_get_clientdata(client);
+	unsigned int i, size;
+	uint8_t buf[25];
+	int ret;
+
+	
+	size = tas5711_register_size(&client->dev, reg);	 
+	if (size == 0)
+		return -EINVAL;
+
+	buf[0] = reg;
+	    
+	for (i=1;i<size+1;i++) {
+		buf[i] = data[i-1];
+		//printk("[lfy][data[%d]=%x\t",i,buf[i]);
+	}
+      // printk("\n");
+	ret = i2c_master_send(client, buf, size + 1);
+	if (ret == size + 1)
+		return 0;
+	else if (ret < 0)
+	{
+		printk("[lfy][tas5711]ERROR WRITE! \n");
+		return ret;
+	}
+	else
+		return -EIO;
+}
+
+static int tas5086_reg_read(void *context, unsigned int reg,
+			     unsigned int *value)
+{
+	struct i2c_client *client = context;
+	struct tas571x_private *priv = i2c_get_clientdata(client);
+	uint8_t send_buf, recv_buf[4];
+	struct i2c_msg msgs[2];
+	unsigned int size;
+	unsigned int i;
+	int ret;
+
+	size = tas5711_register_size(&client->dev, reg);
+	if (size == 0)
+		return -EINVAL;
+
+	send_buf = reg;
+
+	msgs[0].addr = client->addr;
+	msgs[0].len = sizeof(send_buf);
+	msgs[0].buf = &send_buf;
+	msgs[0].flags = 0;
+
+	msgs[1].addr = client->addr;
+	msgs[1].len = size;
+	msgs[1].buf = recv_buf;
+	msgs[1].flags = I2C_M_RD;
+
+	ret = i2c_transfer(client->adapter, msgs, ARRAY_SIZE(msgs));
+	if (ret < 0)
+		return ret;
+	else if (ret != ARRAY_SIZE(msgs))
+		return -EIO;
+
+	*value = 0;
+
+	for (i = 0; i < size; i++) {
+		*value <<= 8;
+		*value |= recv_buf[i];
+	}
+	return 0;
+}
+
+void  tas5711_ExitSD(void)
+{
+	//struct tas571x_private *priv = i2c_get_clientdata(client);
+
+}
+
+void  tas5711_EnterSD(void)
+{
+//	struct tas571x_private *priv = i2c_get_clientdata(client);
+
+}
+
+void  tas5711_RESET(void)
+{
+	//struct tas571x_private *priv = i2c_get_clientdata(client);
+//	gpiod_set_value(priv->reset_gpio, 0);
+//	gpiod_set_value(priv->pdn_gpio, 0);
+//	usleep_range(120, 250);
+//	gpiod_set_value(priv->pdn_gpio, 1);
+    //  	usleep_range(120, 250);
+//	gpiod_set_value(priv->reset_gpio, 1);
+	//usleep_range(15000, 25000); 
+}
+void  tas5711_SetMasterVol(unsigned int Index)
+{
+	unsigned int value = Index;
+	int i =0;
+	if(value > 21)
+	{
+		printk("[lfy][tas5711] input Vol level errot\n");
+		return ;
+	}
+	//printk("[lfy][tas5711_SetMasterVol] private_data->client.address = %x\n",client_5711->addr);
+       MasterVol = value;
+	if(tas5711_regOnebyte_write(client_5711,TI_TAS5711_MASTER_VOL,Vol_Map[MasterVol])<0)
+	{
+		printk("[lfy][tas5711]write  error reg =%x,data =%x\n",TI_TAS5711_MASTER_VOL,Vol_Map[MasterVol]);
+	}
+}
+
+static int  tas5711_REGInit(struct i2c_client *client)
+{
+	struct tas571x_private *priv = i2c_get_clientdata(client);
+	int i =0;
+
+	//init onebyte reg
+	for(i=0;i<ONE_BYTE_REG_NUM;i++)
+	{
+		if(tas5711_regOnebyte_write(client,OnebyteReg[i],OnebyteRegData[i])<0)
+		{
+			printk("[lfy][tas5711]write  error reg =%x,data =%x\n",OnebyteReg[i],OnebyteRegData[i]);
+			//return -1;
+		}		
+	}
+       //init configuration
+       //input mux
+       
+       tas5711_reg_write(client,TI_TAS5711_INPUT_MUX,Input_MUX);
+	 msleep(1);
+	// out pwm  mux
+	 tas5711_reg_write(client,TI_TAS5711_PWM_OUTPUT_MUX,PWM_MUX);
+	msleep(1);
+
+	//ch1 BQ
+	tas5711_reg_write(client,TI_TAS5711_CHANNEL1_3D_BQ0,CH1_BQ0);
+	 msleep(1);
+	tas5711_reg_write(client,TI_TAS5711_CHANNEL1_3D_BQ1,CH1_BQ1);
+	 msleep(1);
+	tas5711_reg_write(client,TI_TAS5711_CHANNEL1_BQ2,CH1_BQ2);
+	 msleep(1);
+	tas5711_reg_write(client,TI_TAS5711_CHANNEL1_BQ3,CH1_BQ3);
+	 msleep(1);
+	tas5711_reg_write(client,TI_TAS5711_CHANNEL1_BQ4,CH1_BQ4);
+	 msleep(1);
+	tas5711_reg_write(client,TI_TAS5711_CHANNEL1_BQ5,CH1_BQ5);
+	 msleep(1);
+	tas5711_reg_write(client,TI_TAS5711_CHANNEL1_BQ6,CH1_BQ6);
+	 msleep(1);
+	tas5711_reg_write(client,TI_TAS5711_CHANNEL1_BQ7,CH1_BQ7);
+	 msleep(1);
+	tas5711_reg_write(client,TI_TAS5711_CHANNEL1_BQ8,CH1_BQ8);
+	 msleep(1);
+	//CH2 BQ
+	tas5711_reg_write(client,TI_TAS5711_CHANNEL2_3D_BQ0,CH2_BQ0);
+	msleep(1);
+	tas5711_reg_write(client,TI_TAS5711_CHANNEL2_3D_BQ1,CH2_BQ1);
+	msleep(1);
+	tas5711_reg_write(client,TI_TAS5711_CHANNEL2_BQ2,CH2_BQ2);
+	msleep(1);
+	tas5711_reg_write(client,TI_TAS5711_CHANNEL2_BQ3,CH2_BQ3);
+	msleep(1);
+	tas5711_reg_write(client,TI_TAS5711_CHANNEL2_BQ4,CH2_BQ4);
+	msleep(1);
+	tas5711_reg_write(client,TI_TAS5711_CHANNEL2_BQ5,CH2_BQ5);
+	msleep(1);
+	tas5711_reg_write(client,TI_TAS5711_CHANNEL2_BQ6,CH2_BQ6);
+	msleep(1);
+	tas5711_reg_write(client,TI_TAS5711_CHANNEL2_BQ7,CH2_BQ7);
+	msleep(1);
+	tas5711_reg_write(client,TI_TAS5711_CHANNEL2_BQ8,CH2_BQ8);
+	msleep(1);
+
+	//init DRC
+	tas5711_reg_write(client,TI_TAS5711_DRC1_AE,DRC1AE);
+	msleep(1);
+	tas5711_reg_write(client,TI_TAS5711_DRC1_AA,DRC1AA);
+	msleep(1);
+	tas5711_reg_write(client,TI_TAS5711_DRC1_AD,DRC1AD);
+	msleep(1);
+	tas5711_reg_write(client,TI_TAS5711_DRC2_AE,DRC2AE);
+	msleep(1);
+	tas5711_reg_write(client,TI_TAS5711_DRC2_AA,DRC2AA);
+	msleep(1);
+	tas5711_reg_write(client,TI_TAS5711_DRC2_AD,DRC2AD);
+	msleep(1);
+	tas5711_reg_write(client,TI_TAS5711_DRC1_T,DRC1_T);
+	msleep(1);
+	tas5711_reg_write(client,TI_TAS5711_DRC1_O,DRC1_O);
+	msleep(1);
+	tas5711_reg_write(client,TI_TAS5711_DRC1_K,DRC1_K);
+	msleep(1);
+	tas5711_reg_write(client,TI_TAS5711_DRC2_T,DRC2_T);
+	msleep(1);
+	tas5711_reg_write(client,TI_TAS5711_DRC2_O,DRC2_O);
+	msleep(1);
+	tas5711_reg_write(client,TI_TAS5711_DRC2_K,DRC2_K);
+	msleep(1);
+
+	//int DRC CONTROL
+	tas5711_reg_write(client,TI_TAS5711_DRC_CONTROL,DRC_Control);
+	msleep(1);
+	tas5711_reg_write(client,TI_TAS5711_EQ_CONTROL,BSW_Control);
+	msleep(1);
+
+	// mixer
+	tas5711_reg_write(client,TI_TAS5711_CH1_OUTPUT_Mixer,CH1_OUTPUT_MIX);
+
+	msleep(1);
+	tas5711_reg_write(client,TI_TAS5711_CH2_OUTPUT_Mixer,CH2_OUTPUT_MIX);
+
+	msleep(1);
+
+	tas5711_reg_write(client,TI_TAS5711_CH1_INPUT_Mixer,CH1_INPUT_MIX);
+
+	msleep(1);
+	tas5711_reg_write(client,TI_TAS5711_CH2_INPUT_Mixer,CH2_INPUT_MIX);
+
+	msleep(1);
+	tas5711_reg_write(client,TI_TAS5711_CH3_INPUT_Mixer,CH3_INPUT_MIX);
+
+	msleep(1);
+
+	//OUTPUT SCALE
+	tas5711_reg_write(client,TI_TAS5711_OUTPUT_POST_SCALE,Output_post_scale);
+
+	msleep(1);
+	tas5711_reg_write(client,TI_TAS5711_OUTPUT_PRE_SCALE,Output_pre_scale);
+
+	msleep(1);
+      // sub BQ
+	tas5711_reg_write(client,TI_TAS5711_Sub_BQ0,Subchannel_BQ0);
+
+	msleep(1);
+	tas5711_reg_write(client,TI_TAS5711_Sub_BQ1,Subchannel_BQ1);
+
+	msleep(1);
+     // PSEDUO
+ 	tas5711_reg_write(client,TI_TAS5711_PSEUDO_BQ1,Psedup_ch2_BQ0);
+
+	msleep(1);
+	tas5711_reg_write(client,TI_TAS5711_PSEUDO_BQ2,Psedup_ch2_BQ1);
+
+	msleep(1);
+	// CH4 OUTPUT MIX
+     	tas5711_reg_write(client,TI_TAS5711_CH4_OUTPUT_MIX,CH4_OUTPUT_MIX);
+
+	msleep(1);
+
+	return 0;
+
+}
+static ssize_t MasterVol_show(struct device *dev,
+				  struct device_attribute *attr, char *buf)
+{
+	int ret = 0;
+	ret = sprintf(buf, "TAS5711 MasterVol = %d\n",
+			MasterVol);
+	return ret;
+}
+
+static ssize_t MasterVol_store(struct device *dev,
+				   struct device_attribute *attr,
+				   const char *buf, size_t count)
+{
+	int ret = 0;
+	int vol_level;
+      
+	vol_level = -1;
+	sscanf(buf, "%d", &vol_level);
+      tas5711_SetMasterVol(vol_level);
+
+	return count;
+}
+static struct device_attribute dev_attr_tas5711_MasterVol=
+__ATTR(MasterVol, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH, MasterVol_show, MasterVol_store);
+
+
+static struct attribute *tas5711_sysfs_attrs[] = {
+&dev_attr_tas5711_MasterVol.attr,
+
+};
+
+static struct attribute_group tas5711_attribute_group = {
+.attrs = tas5711_sysfs_attrs,
+};
+static int  tas5711_probe(struct i2c_client *client,const struct i2c_device_id *id)
+{
+
+	struct tas571x_private *priv;
+	struct device *dev = &client->dev;
+	int ret =0;
+
+	int retval;
+	//struct gpio_chip *chip = gpiod_to_chip(gpio_to_desc(365));
+	//unsigned	offset = gpio_chip_hwgpio(gpio_to_desc(365));
+	//config_gpio_ctrl0reg(chip,  0x18003, offset);
+	//config_gpio_ctrl1reg(chip,  0x04c00000, offset);
+	printk("[lfy][tas5711] %s\n", __func__);
+	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C)) {
+
+		dev_err(&client->dev, "I2C functionality not supported\n");
+		return -ENODEV;
+	}
+ 	priv =kzalloc(sizeof(struct tas571x_private), GFP_KERNEL);
+	if (!priv)
+		return -ENOMEM;
+
+
+	client_5711 = kzalloc(sizeof(struct i2c_client), GFP_KERNEL);
+	if (!client_5711)
+		return -ENOMEM;
+	
+	client_5711 = client;
+	i2c_set_clientdata(client,priv);
+	//init gpio
+	ret = gpio_request(365, "tas5711_PDN");
+	if (ret<0) {
+		printk( "ret = %d : could not req gpio irq\n", ret);
+		return -1;
+
+	}
+       gpio_direction_output(365,0); 
+	   msleep(200); 
+	ret = gpio_request(343, "tas5711_RST");
+	if (ret) {
+		printk( "ret = %d : could not req gpio reset\n", ret);
+		return -1;
+	}
+	gpio_direction_output(343, 0);
+	msleep(1000); 
+	gpio_direction_output(365,1);
+  	msleep(400); 
+	gpio_direction_output(343, 1);
+	msleep(500);
+	msleep(500);
+	//start osc
+	
+	if(tas5711_regOnebyte_write(client,TI_TAS5711_OSCILLATOR_TRIM,0x00)<0)
+	{
+		printk("[lfy][tas5711]WRITE error!!!!!!!!!!\n");
+		return -1;
+	}
+	printk("[lfy][tas5711]Start reginit \n");
+	msleep(100);
+	// init REG
+	tas5711_REGInit(client);
+	//EXIT sd
+	printk("[lfy][tas5711]EXIT sd \n");
+      
+	if(tas5711_regOnebyte_write(client,TI_TAS5711_POWER_CONTROL,0x08)<0)
+	{
+		printk("[lfy][tas5711]WRITE error!!!!!!!!!!\n");
+		return -1;
+	}
+	msleep(400);
+	//regester devsys 
+       ret =  sysfs_create_group(&client->dev.kobj,&tas5711_attribute_group);
+	if (ret) {
+		pr_err("[lfy][tas5711]%s: could not create sysfs group\n", __func__);
+		return -1;
+	}
+      printk("[lfy][tas5711]probe  is over \n");
+	return 0;
+}
+static int  tas5711_remove(struct i2c_client *client)
+{
+       printk("[lfy][tas5711] %s\n", __func__);
+	   return 0;
+}
+static int tas5711_suspend(struct device*dev)
+{
+
+	printk("[lfy][tas5711] %s\n", __func__);
+	return 0;
+}
+static int tas5711_resume(struct device *dev)
+{
+
+	printk("[lfy][tas5711] %s\n", __func__);
+
+	return 0;
+}
+
+static const struct dev_pm_ops tas5711_pm_ops ={
+	.suspend =  tas5711_suspend,
+	.resume  =  tas5711_resume,	
+};
+static const struct i2c_device_id tas5711_id[] = {
+	{TAS5711_I2C_NAME, 0},
+	{}
+};
+
+static struct i2c_driver tas5711_driver = {
+	.driver = {
+		.name  = TAS5711_I2C_NAME,
+		.owner = THIS_MODULE,
+		.pm    = &tas5711_pm_ops,
+	},
+	.probe		= tas5711_probe,
+	.remove		= tas5711_remove,
+	.id_table	= tas5711_id,
+};
+static int tas5711_create_i2c_device(void)    
+{
+        struct i2c_adapter *adapter;
+        struct i2c_client *client;
+        struct i2c_board_info info={
+                I2C_BOARD_INFO(TAS5711_I2C_NAME, 0x1b),
+        };
+
+        adapter = i2c_get_adapter(5);
+        if (!adapter) {
+                printk(KERN_ERR "[lfy][tas5711]i2c_get_adapter failed\n");
+                return -EINVAL;
+        }
+
+        client = i2c_new_device(adapter, &info);
+        if (!client) {
+                printk(KERN_ERR "[lfy][tas5711]i2c_new_device() failed\n");
+                i2c_put_adapter(adapter);
+                return -EINVAL;
+        }
+        return 0;
+}
+static int __init tas5711_init(void)
+{
+      printk(KERN_ERR "[lfy][tas5711]tas5711_init() \n");
+	  
+	tas5711_create_i2c_device(); 
+
+	return i2c_add_driver(&tas5711_driver);
+}
+static void __exit tas5711_exit(void)
+{
+	i2c_del_driver(&tas5711_driver);
+}
+late_initcall(tas5711_init);
+module_exit(tas5711_exit);
+
+MODULE_DESCRIPTION("ASoC TAS571x driver");
+MODULE_AUTHOR("fayang.lin");
+MODULE_LICENSE("GPL");
diff --git a/kernel/cht/drivers/misc/tas5711/tas5711.h b/kernel/cht/drivers/misc/tas5711/tas5711.h
new file mode 100644
index 0000000..a704ffc
--- /dev/null
+++ b/kernel/cht/drivers/misc/tas5711/tas5711.h
@@ -0,0 +1,113 @@
+/*
+ * TAS571x amplifier audio driver
+ *
+ * Copyright (C) 2015 Google, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#ifndef _TAS5711_H
+#define _TAS5711_H
+
+/* device registers */
+#define TAS5711_I2C_NAME 							       "tas5711"  
+#define TI_TAS5711_I2C_ADDR_UP					0x36		//TAS57xx I2C address without R/W bit  A_SET = 1 PULL UP
+#define TI_TAS5711_I2C_ADDR_DOWN					0x34		//TAS57xx I2C address without R/W bit A_SET = 0 PULL DOWN 
+#define TI_TAS5711_I2C_ADDR                        			TI_TAS5711_I2C_ADDR_DOWN        
+#define TI_TAS5711_ADAPTER_INDEX					5
+#define TI_TAS5711_CLOCK_CONTROL					0x00
+#define TI_TAS5711_DEVICE_ID						0x01
+#define TI_TAS5711_ERROR_STATUS					0x02
+#define TI_TAS5711_SYSTEM_CONTROL_1				0x03
+#define TI_TAS5711_I2S_MODES						0x04
+#define TI_TAS5711_POWER_CONTROL					0x05
+#define TI_TAS5711_SOFTWARE_MUTE					0x06
+#define TI_TAS5711_MASTER_VOL						0x07
+#define TI_TAS5711_CH1_VOL 						0x08
+#define TI_TAS5711_CH2_VOL 						0x09
+#define TI_TAS5711_CH3_VOL 						0x0A
+#define TI_TAS5711_VOLUME_CONFIG 	      				0x0E
+
+#define TI_TAS5711_MODULATION_LIMIT            		0x10
+#define TI_TAS5711_IC_DELAY_PWM1               			0x11
+#define TI_TAS5711_IC_DELAY_PWM2               			0x12
+#define TI_TAS5711_IC_DELAY_PWM3               			0x13
+#define TI_TAS5711_IC_DELAY_PWM4               			0x14
+
+
+#define TI_TAS5711_SHUTDOWN_GROUP_REGISTER     	0x19
+#define TI_TAS5711_START_STOP_PERIOD           		0x1A
+#define TI_TAS5711_OSCILLATOR_TRIM             		0x1B
+#define TI_TAS5711_BKND_ERR						0x1C
+
+#define TI_TAS5711_INPUT_MUX                   			0x20		//INPUT MUX CONFIGURATION
+#define TI_TAS5711_INPUT_DOWN_MIX              		0x21	//INPUT DOWNMUX CONFIGURATION
+#define TI_TAS5711_PWM_OUTPUT_MUX				0x25		//PWM OUTPUT MUX CONFIGURATION
+
+#define TI_TAS5711_CHANNEL1_3D_BQ0              		0x29 //3
+#define TI_TAS5711_CHANNEL1_3D_BQ1              		0x2A //3
+#define TI_TAS5711_CHANNEL1_BQ2               			0x2B 
+#define TI_TAS5711_CHANNEL1_BQ3                			0x2C
+#define TI_TAS5711_CHANNEL1_BQ4                			0x2D
+#define TI_TAS5711_CHANNEL1_BQ5                			0x2E
+#define TI_TAS5711_CHANNEL1_BQ6                			0x2F
+#define TI_TAS5711_CHANNEL1_BQ7                			0x58
+#define TI_TAS5711_CHANNEL1_BQ8                			0x59
+
+
+#define TI_TAS5711_CHANNEL2_3D_BQ0             		0x30
+#define TI_TAS5711_CHANNEL2_3D_BQ1              		0x31 //3
+#define TI_TAS5711_CHANNEL2_BQ2                			0x32
+#define TI_TAS5711_CHANNEL2_BQ3                			0x33
+#define TI_TAS5711_CHANNEL2_BQ4                			0x34
+#define TI_TAS5711_CHANNEL2_BQ5                			0x35
+#define TI_TAS5711_CHANNEL2_BQ6                			0x36
+#define TI_TAS5711_CHANNEL2_BQ7                			0x5C
+#define TI_TAS5711_CHANNEL2_BQ8                			0x5D
+
+
+
+#define TI_TAS5711_DRC1_AE                     			0x3A
+#define TI_TAS5711_DRC1_AA                     			0x3B
+#define TI_TAS5711_DRC1_AD                     			0x3C
+#define TI_TAS5711_DRC1_T                      				0x40
+#define TI_TAS5711_DRC1_K                      				0x41
+#define TI_TAS5711_DRC1_O                      				0x42
+
+
+#define TI_TAS5711_DRC2_AE                     			0x3D
+#define TI_TAS5711_DRC2_AA                     			0x3E
+#define TI_TAS5711_DRC2_AD                     			0x3F
+#define TI_TAS5711_DRC2_T                      				0x43
+#define TI_TAS5711_DRC2_K                      				0x44
+#define TI_TAS5711_DRC2_O                      				0x45
+#define TI_TAS5711_DRC_CONTROL                 			0x46
+
+#define TI_TAS5711_EQ_CONTROL		        			0x50
+
+#define TI_TAS5711_CH1_OUTPUT_Mixer	 			0x51
+#define TI_TAS5711_CH2_OUTPUT_Mixer	  			0x52
+#define TI_TAS5711_CH1_INPUT_Mixer	 				0x53
+#define TI_TAS5711_CH2_INPUT_Mixer	 				0x54
+#define TI_TAS5711_CH3_INPUT_Mixer	 				0x55
+
+#define TI_TAS5711_OUTPUT_POST_SCALE	 			0x56
+#define TI_TAS5711_OUTPUT_PRE_SCALE	 				0x57
+
+#define TI_TAS5711_Sub_BQ0							0x5A
+#define TI_TAS5711_Sub_BQ1							0x5B
+#define TI_TAS5711_PSEUDO_BQ1	     	 			0x5E//3
+#define TI_TAS5711_PSEUDO_BQ2	     	 			0x5F//3
+#define TI_TAS5711_CH4_OUTPUT_MIX	     	 		0x60//4
+
+#define TI_TAS5711_ADRESS_ENABLE					0xF8  //write F9 A5 A5 A5
+#define TI_TAS5711_ADRESS_UPDATE					0xF9  
+
+#define TI_TAS5711_PDN_GPIO                                       365
+#define TI_TAS5711_RST_GPIO                                       343
+#define TI_TAS5711_BT_ENABLE_GPIO                            366
+
+#endif /* _TAS571X_H */
diff --git a/kernel/cht/drivers/usb/class/cdc-acm.c b/kernel/cht/drivers/usb/class/cdc-acm.c
old mode 100644
new mode 100755
index 975e6ea..96d11de
--- a/kernel/cht/drivers/usb/class/cdc-acm.c
+++ b/kernel/cht/drivers/usb/class/cdc-acm.c
@@ -2070,6 +2070,7 @@ static int __init acm_init(void)
 	retval = gpio_get_value(FIRMWARE_OPTION);
 	pr_info("Modem_Ctrl: set FIRMWARE_OPTION to 0, actual result:  %d)\n", retval);*/
 
+     /*
 	pr_info("Modem_Ctrl: IRQ request for GPIO (POWER_OFF: %d)\n", POWER_OFF);
 	retval = gpio_request(POWER_OFF, "power_off");
 	if (retval < 0)
@@ -2136,7 +2137,7 @@ static int __init acm_init(void)
 		retval = -ENODEV;
 		//return retval;
 	}
-
+     */
 	pr_info("Modem_Ctrl: Finish Power On Modem\n");
 
 
diff --git a/kernel/cht/sound/soc/codecs/rt5645/rt5645.c b/kernel/cht/sound/soc/codecs/rt5645/rt5645.c
old mode 100644
new mode 100755
index df25d7e..6b71033
--- a/kernel/cht/sound/soc/codecs/rt5645/rt5645.c
+++ b/kernel/cht/sound/soc/codecs/rt5645/rt5645.c
@@ -1783,7 +1783,7 @@ static int rt5645_spk_event(struct snd_soc_dapm_widget *w,
 
 	switch (event) {
 	case SND_SOC_DAPM_POST_PMU:
-		gpio_direction_output(365, 0);
+		//gpio_direction_output(365, 0);
 		snd_soc_write(codec, 0x03, 0x0808);//open lineout
 		rt5645_index_write(codec, 0x1c, 0xfd20);
 		rt5645_index_write(codec, 0x20, 0x611f);
@@ -1807,7 +1807,7 @@ static int rt5645_spk_event(struct snd_soc_dapm_widget *w,
 
 	case SND_SOC_DAPM_PRE_PMD:
 		
-		gpio_direction_output(365, 1);
+		//gpio_direction_output(365, 1);
 		snd_soc_update_bits(codec, RT5645_SPK_VOL,
 			RT5645_L_MUTE | RT5645_R_MUTE,
 			RT5645_L_MUTE | RT5645_R_MUTE);
@@ -3476,8 +3476,8 @@ static int rt5645_probe(struct snd_soc_codec *codec)
 	//snd_soc_update_bits(codec, RT5645_PWR_ANLG2, 0x0204, 0x0204);
 	//snd_soc_update_bits(codec, RT5645_PWR_MIXER, 0xF002, 0xF002);
 	
-	gpio_request(365, "AUDIO_BT_KEY_CPU");
-	gpio_direction_output(365, 1);
+	//gpio_request(365, "AUDIO_BT_KEY_CPU");
+	//gpio_direction_output(365, 0);
 #endif
 
 #ifdef RTK_IOCTL
diff --git a/kernel/cht/uefi/cht/x86_64_defconfig b/kernel/cht/uefi/cht/x86_64_defconfig
index 08b78e1..33d46f8 100755
--- a/kernel/cht/uefi/cht/x86_64_defconfig
+++ b/kernel/cht/uefi/cht/x86_64_defconfig
@@ -4521,14 +4521,14 @@ CONFIG_FONT_AUTOSELECT=y
 #CONFIG_CC_TOUCHSCREEN_GT9110=y
 #CONFIG_SENSORS_BMA250=y
 #CONFIG_INTEL_MID_GPS is not set
-#CONFIG_TOUCHSCREEN_SILEAD is not set
+#CONFIG_TOUCHSCREEN_SILEAD=y
 #CONFIG_INPUT_HALL_SWITCH=y
 CONFIG_IFLY_NOTIFY=y
 #CONFIG_SND_SOC_ES8316=y
 #CONFIG_SND_SOC_RT5651=n
 #CONFIG_EMITOUCH_HANVON is not set 
 CONFIG_BT_EVENT=y
-
+CONFIG_TAS5711=y
 
 #Camera config
 CONFIG_VCM_DW9714=m
